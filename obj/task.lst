                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.2 #13350 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module task
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _raise_error
                                     12 	.globl _memset
                                     13 	.globl _task_number
                                     14 	.globl _last_task_p
                                     15 	.globl _first_task_p
                                     16 	.globl _current_task_p
                                     17 	.globl _tasks
                                     18 	.globl _create_task
                                     19 	.globl _destroy_task
                                     20 ;--------------------------------------------------------
                                     21 ; special function registers
                                     22 ;--------------------------------------------------------
                                     23 ;--------------------------------------------------------
                                     24 ; ram data
                                     25 ;--------------------------------------------------------
                                     26 	.area _DATA
                           000000    27 G$tasks$0_0$0==.
      000000                         28 _tasks::
      000000                         29 	.ds 224
                                     30 ;--------------------------------------------------------
                                     31 ; ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area _INITIALIZED
                           000000    34 Ftask$__EMU_PROFILER_INIT$0_0$0==.
      000000                         35 ___EMU_PROFILER_INIT:
      000000                         36 	.ds 2
                           000002    37 G$current_task_p$0_0$0==.
      000002                         38 _current_task_p::
      000002                         39 	.ds 2
                           000004    40 G$first_task_p$0_0$0==.
      000004                         41 _first_task_p::
      000004                         42 	.ds 2
                           000006    43 G$last_task_p$0_0$0==.
      000006                         44 _last_task_p::
      000006                         45 	.ds 2
                           000008    46 G$task_number$0_0$0==.
      000008                         47 _task_number::
      000008                         48 	.ds 1
                                     49 ;--------------------------------------------------------
                                     50 ; absolute external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area _DABS (ABS)
                                     53 ;--------------------------------------------------------
                                     54 ; global & static initialisations
                                     55 ;--------------------------------------------------------
                                     56 	.area _HOME
                                     57 	.area _GSINIT
                                     58 	.area _GSFINAL
                                     59 	.area _GSINIT
                                     60 ;--------------------------------------------------------
                                     61 ; Home
                                     62 ;--------------------------------------------------------
                                     63 	.area _HOME
                                     64 	.area _HOME
                                     65 ;--------------------------------------------------------
                                     66 ; code
                                     67 ;--------------------------------------------------------
                                     68 	.area _CODE
                           000000    69 	G$create_task$0$0	= .
                                     70 	.globl	G$create_task$0$0
                           000000    71 	C$task.c$13$0_0$131	= .
                                     72 	.globl	C$task.c$13$0_0$131
                                     73 ;src/task.c:13: struct task_t * create_task(enum task_type_e type,uint8_t period,void(* init)(void),void(* update)(void))
                                     74 ;	---------------------------------
                                     75 ; Function create_task
                                     76 ; ---------------------------------
      000000                         77 _create_task::
      000000 E8 FC            [16]   78 	add	sp, #-4
      000002 F8 03            [12]   79 	ldhl	sp,	#3
      000004 32               [ 8]   80 	ld	(hl-), a
      000005 73               [ 8]   81 	ld	(hl), e
                           000006    82 	C$task.c$24$1_0$131	= .
                                     83 	.globl	C$task.c$24$1_0$131
                                     84 ;src/task.c:24: struct task_t * new_task = &tasks[task_number]; 
      000006 21r08r00         [12]   85 	ld	hl, #_task_number
      000009 4E               [ 8]   86 	ld	c, (hl)
      00000A 06 00            [ 8]   87 	ld	b, #0x00
      00000C 69               [ 4]   88 	ld	l, c
      00000D 60               [ 4]   89 	ld	h, b
      00000E 29               [ 8]   90 	add	hl, hl
      00000F 09               [ 8]   91 	add	hl, bc
      000010 29               [ 8]   92 	add	hl, hl
      000011 09               [ 8]   93 	add	hl, bc
      000012 01r00r00         [12]   94 	ld	bc,#_tasks
      000015 09               [ 8]   95 	add	hl,bc
      000016 4D               [ 4]   96 	ld	c, l
      000017 44               [ 4]   97 	ld	b, h
      000018 33               [ 8]   98 	inc	sp
      000019 33               [ 8]   99 	inc	sp
      00001A C5               [16]  100 	push	bc
                           00001B   101 	C$task.c$26$1_0$131	= .
                                    102 	.globl	C$task.c$26$1_0$131
                                    103 ;src/task.c:26: if(new_task >= last_task_p)
      00001B F8 00            [12]  104 	ldhl	sp,	#0
      00001D 5D               [ 4]  105 	ld	e, l
      00001E 54               [ 4]  106 	ld	d, h
      00001F 21r06r00         [12]  107 	ld	hl, #_last_task_p
      000022 1A               [ 8]  108 	ld	a, (de)
      000023 13               [ 8]  109 	inc	de
      000024 96               [ 8]  110 	sub	a, (hl)
      000025 23               [ 8]  111 	inc	hl
      000026 1A               [ 8]  112 	ld	a, (de)
      000027 9E               [ 8]  113 	sbc	a, (hl)
      000028 38 10            [12]  114 	jr	C, 00102$
                           00002A   115 	C$task.c$28$2_0$132	= .
                                    116 	.globl	C$task.c$28$2_0$132
                                    117 ;src/task.c:28: raise_error(ESIZE,0xFF,"cannot create task");
      00002A 11r94r00         [12]  118 	ld	de, #___str_0
      00002D D5               [16]  119 	push	de
      00002E 1E FF            [ 8]  120 	ld	e, #0xff
      000030 3E 02            [ 8]  121 	ld	a, #0x02
      000032 CDr00r00         [24]  122 	call	_raise_error
                           000035   123 	C$task.c$29$2_0$132	= .
                                    124 	.globl	C$task.c$29$2_0$132
                                    125 ;src/task.c:29: return NULL;  //should be check
      000035 01 00 00         [12]  126 	ld	bc, #0x0000
      000038 18 54            [12]  127 	jr	00105$
      00003A                        128 00102$:
                           00003A   129 	C$task.c$32$1_0$131	= .
                                    130 	.globl	C$task.c$32$1_0$131
                                    131 ;src/task.c:32: if(tasks[task_number].task_id != 0)
      00003A 03               [ 8]  132 	inc	bc
      00003B 03               [ 8]  133 	inc	bc
      00003C 03               [ 8]  134 	inc	bc
      00003D 03               [ 8]  135 	inc	bc
      00003E 0A               [ 8]  136 	ld	a, (bc)
      00003F B7               [ 4]  137 	or	a, a
      000040 28 10            [12]  138 	jr	Z, 00104$
                           000042   139 	C$task.c$34$2_0$133	= .
                                    140 	.globl	C$task.c$34$2_0$133
                                    141 ;src/task.c:34: raise_error(ESIZE,0xFF,"cannot overwrite task");
      000042 11rA7r00         [12]  142 	ld	de, #___str_1
      000045 D5               [16]  143 	push	de
      000046 1E FF            [ 8]  144 	ld	e, #0xff
      000048 3E 02            [ 8]  145 	ld	a, #0x02
      00004A CDr00r00         [24]  146 	call	_raise_error
                           00004D   147 	C$task.c$35$2_0$133	= .
                                    148 	.globl	C$task.c$35$2_0$133
                                    149 ;src/task.c:35: return NULL;  //should be check
      00004D 01 00 00         [12]  150 	ld	bc, #0x0000
      000050 18 3C            [12]  151 	jr	00105$
      000052                        152 00104$:
                           000052   153 	C$task.c$38$1_0$131	= .
                                    154 	.globl	C$task.c$38$1_0$131
                                    155 ;src/task.c:38: new_task->task_type = type;
      000052 D1               [12]  156 	pop	de
      000053 D5               [16]  157 	push	de
      000054 21 06 00         [12]  158 	ld	hl, #0x0006
      000057 19               [ 8]  159 	add	hl, de
      000058 4D               [ 4]  160 	ld	c, l
      000059 44               [ 4]  161 	ld	b, h
      00005A F8 03            [12]  162 	ldhl	sp,	#3
      00005C 7E               [ 8]  163 	ld	a, (hl)
      00005D 02               [ 8]  164 	ld	(bc), a
                           00005E   165 	C$task.c$39$1_0$131	= .
                                    166 	.globl	C$task.c$39$1_0$131
                                    167 ;src/task.c:39: new_task->task_id = task_number;
      00005E D1               [12]  168 	pop	de
      00005F D5               [16]  169 	push	de
      000060 21 04 00         [12]  170 	ld	hl, #0x0004
      000063 19               [ 8]  171 	add	hl, de
      000064 4D               [ 4]  172 	ld	c, l
      000065 44               [ 4]  173 	ld	b, h
      000066 FAr08r00         [16]  174 	ld	a, (#_task_number)
      000069 02               [ 8]  175 	ld	(bc), a
                           00006A   176 	C$task.c$40$1_0$131	= .
                                    177 	.globl	C$task.c$40$1_0$131
                                    178 ;src/task.c:40: new_task->task_period = period;
      00006A D1               [12]  179 	pop	de
      00006B D5               [16]  180 	push	de
      00006C 21 05 00         [12]  181 	ld	hl, #0x0005
      00006F 19               [ 8]  182 	add	hl, de
      000070 4D               [ 4]  183 	ld	c, l
      000071 44               [ 4]  184 	ld	b, h
      000072 F8 02            [12]  185 	ldhl	sp,	#2
      000074 7E               [ 8]  186 	ld	a, (hl)
      000075 02               [ 8]  187 	ld	(bc), a
                           000076   188 	C$task.c$41$1_0$131	= .
                                    189 	.globl	C$task.c$41$1_0$131
                                    190 ;src/task.c:41: new_task->init_task_f = init;
      000076 D1               [12]  191 	pop	de
      000077 D5               [16]  192 	push	de
      000078 F8 06            [12]  193 	ldhl	sp,	#6
      00007A 2A               [ 8]  194 	ld	a, (hl+)
      00007B 12               [ 8]  195 	ld	(de), a
      00007C 13               [ 8]  196 	inc	de
                           00007D   197 	C$task.c$42$1_0$131	= .
                                    198 	.globl	C$task.c$42$1_0$131
                                    199 ;src/task.c:42: new_task->update_task_f = update;
      00007D 2A               [ 8]  200 	ld	a, (hl+)
      00007E 12               [ 8]  201 	ld	(de), a
      00007F C1               [12]  202 	pop	bc
      000080 C5               [16]  203 	push	bc
      000081 03               [ 8]  204 	inc	bc
      000082 03               [ 8]  205 	inc	bc
      000083 2A               [ 8]  206 	ld	a, (hl+)
      000084 02               [ 8]  207 	ld	(bc), a
      000085 03               [ 8]  208 	inc	bc
      000086 7E               [ 8]  209 	ld	a, (hl)
      000087 02               [ 8]  210 	ld	(bc), a
                           000088   211 	C$task.c$44$1_0$131	= .
                                    212 	.globl	C$task.c$44$1_0$131
                                    213 ;src/task.c:44: task_number++;
      000088 21r08r00         [12]  214 	ld	hl, #_task_number
      00008B 34               [12]  215 	inc	(hl)
                           00008C   216 	C$task.c$46$1_0$131	= .
                                    217 	.globl	C$task.c$46$1_0$131
                                    218 ;src/task.c:46: return new_task;
      00008C C1               [12]  219 	pop	bc
      00008D C5               [16]  220 	push	bc
      00008E                        221 00105$:
                           00008E   222 	C$task.c$47$1_0$131	= .
                                    223 	.globl	C$task.c$47$1_0$131
                                    224 ;src/task.c:47: }
      00008E E8 04            [16]  225 	add	sp, #4
      000090 E1               [12]  226 	pop	hl
      000091 E8 04            [16]  227 	add	sp, #4
      000093 E9               [ 4]  228 	jp	(hl)
                           000094   229 Ftask$__str_0$0_0$0 == .
      000094                        230 ___str_0:
      000094 63 61 6E 6E 6F 74 20   231 	.ascii "cannot create task"
             63 72 65 61 74 65 20
             74 61 73 6B
      0000A6 00                     232 	.db 0x00
                           0000A7   233 Ftask$__str_1$0_0$0 == .
      0000A7                        234 ___str_1:
      0000A7 63 61 6E 6E 6F 74 20   235 	.ascii "cannot overwrite task"
             6F 76 65 72 77 72 69
             74 65 20 74 61 73 6B
      0000BC 00                     236 	.db 0x00
                           0000BD   237 	G$destroy_task$0$0	= .
                                    238 	.globl	G$destroy_task$0$0
                           0000BD   239 	C$task.c$49$1_0$135	= .
                                    240 	.globl	C$task.c$49$1_0$135
                                    241 ;src/task.c:49: void destroy_task(struct task_t * task)
                                    242 ;	---------------------------------
                                    243 ; Function destroy_task
                                    244 ; ---------------------------------
      0000BD                        245 _destroy_task::
                           0000BD   246 	C$task.c$51$1_0$135	= .
                                    247 	.globl	C$task.c$51$1_0$135
                                    248 ;src/task.c:51: if(task == current_task_p)
      0000BD 21r02r00         [12]  249 	ld	hl, #_current_task_p
      0000C0 7E               [ 8]  250 	ld	a, (hl)
      0000C1 93               [ 4]  251 	sub	a, e
      0000C2 20 1A            [12]  252 	jr	NZ, 00102$
      0000C4 23               [ 8]  253 	inc	hl
      0000C5 7E               [ 8]  254 	ld	a, (hl)
      0000C6 92               [ 4]  255 	sub	a, d
      0000C7 20 15            [12]  256 	jr	NZ, 00102$
                           0000C9   257 	C$task.c$53$2_0$136	= .
                                    258 	.globl	C$task.c$53$2_0$136
                                    259 ;src/task.c:53: raise_error(EPERM,current_task_p->task_id,"cannot destroy this task");
      0000C9 01rF1r00         [12]  260 	ld	bc, #___str_2+0
      0000CC 21r02r00         [12]  261 	ld	hl, #_current_task_p
      0000CF 2A               [ 8]  262 	ld	a, (hl+)
      0000D0 5F               [ 4]  263 	ld	e, a
      0000D1 56               [ 8]  264 	ld	d, (hl)
      0000D2 21 04 00         [12]  265 	ld	hl, #0x0004
      0000D5 19               [ 8]  266 	add	hl, de
      0000D6 5E               [ 8]  267 	ld	e, (hl)
      0000D7 C5               [16]  268 	push	bc
      0000D8 3E 03            [ 8]  269 	ld	a, #0x03
      0000DA CDr00r00         [24]  270 	call	_raise_error
                           0000DD   271 	C$task.c$54$2_0$136	= .
                                    272 	.globl	C$task.c$54$2_0$136
                                    273 ;src/task.c:54: return;
      0000DD C9               [16]  274 	ret
      0000DE                        275 00102$:
                           0000DE   276 	C$task.c$59$1_1$137	= .
                                    277 	.globl	C$task.c$59$1_1$137
                                    278 ;src/task.c:59: memset((void *)task,0,sizeof(struct task_t));
      0000DE 01 07 00         [12]  279 	ld	bc, #0x0007
      0000E1 C5               [16]  280 	push	bc
      0000E2 01 00 00         [12]  281 	ld	bc, #0x0000
      0000E5 C5               [16]  282 	push	bc
      0000E6 D5               [16]  283 	push	de
      0000E7 CDr00r00         [24]  284 	call	_memset
      0000EA E8 06            [16]  285 	add	sp, #6
                           0000EC   286 	C$task.c$65$1_1$137	= .
                                    287 	.globl	C$task.c$65$1_1$137
                                    288 ;src/task.c:65: --task_number;
      0000EC 21r08r00         [12]  289 	ld	hl, #_task_number
      0000EF 35               [12]  290 	dec	(hl)
                           0000F0   291 	C$task.c$66$1_1$135	= .
                                    292 	.globl	C$task.c$66$1_1$135
                                    293 ;src/task.c:66: }
                           0000F0   294 	C$task.c$66$1_1$135	= .
                                    295 	.globl	C$task.c$66$1_1$135
                           0000F0   296 	XG$destroy_task$0$0	= .
                                    297 	.globl	XG$destroy_task$0$0
      0000F0 C9               [16]  298 	ret
                           0000F1   299 Ftask$__str_2$0_0$0 == .
      0000F1                        300 ___str_2:
      0000F1 63 61 6E 6E 6F 74 20   301 	.ascii "cannot destroy this task"
             64 65 73 74 72 6F 79
             20 74 68 69 73 20 74
             61 73 6B
      000109 00                     302 	.db 0x00
                                    303 	.area _CODE
                                    304 	.area _INITIALIZER
                           000000   305 Ftask$__xinit___EMU_PROFILER_INIT$0_0$0 == .
      000000                        306 __xinit____EMU_PROFILER_INIT:
      000000r00r00                  307 	.dw _EMU_profiler_message
                           000002   308 Ftask$__xinit_current_task_p$0_0$0 == .
      000002                        309 __xinit__current_task_p:
      000002 00 00                  310 	.dw #0x0000
                           000004   311 Ftask$__xinit_first_task_p$0_0$0 == .
      000004                        312 __xinit__first_task_p:
      000004r00r00                  313 	.dw (_tasks + 0)
                           000006   314 Ftask$__xinit_last_task_p$0_0$0 == .
      000006                        315 __xinit__last_task_p:
      000006rE0r00                  316 	.dw (_tasks + 224)
                           000008   317 Ftask$__xinit_task_number$0_0$0 == .
      000008                        318 __xinit__task_number:
      000008 00                     319 	.db #0x00	; 0
                                    320 	.area _CABS (ABS)
