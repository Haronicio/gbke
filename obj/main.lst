                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.2 #13350 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _destroy_task
                                     13 	.globl _create_task
                                     14 	.globl _raise_error
                                     15 	.globl _sprintf
                                     16 	.globl _wait_vbl_done
                                     17 ;--------------------------------------------------------
                                     18 ; special function registers
                                     19 ;--------------------------------------------------------
                                     20 ;--------------------------------------------------------
                                     21 ; ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area _DATA
                                     24 ;--------------------------------------------------------
                                     25 ; ram data
                                     26 ;--------------------------------------------------------
                                     27 	.area _INITIALIZED
                           000000    28 Fmain$__EMU_PROFILER_INIT$0_0$0==.
      000000                         29 ___EMU_PROFILER_INIT:
      000000                         30 	.ds 2
                                     31 ;--------------------------------------------------------
                                     32 ; absolute external ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area _DABS (ABS)
                                     35 ;--------------------------------------------------------
                                     36 ; global & static initialisations
                                     37 ;--------------------------------------------------------
                                     38 	.area _HOME
                                     39 	.area _GSINIT
                                     40 	.area _GSFINAL
                                     41 	.area _GSINIT
                                     42 ;--------------------------------------------------------
                                     43 ; Home
                                     44 ;--------------------------------------------------------
                                     45 	.area _HOME
                                     46 	.area _HOME
                                     47 ;--------------------------------------------------------
                                     48 ; code
                                     49 ;--------------------------------------------------------
                                     50 	.area _CODE
                           000000    51 	G$main$0$0	= .
                                     52 	.globl	G$main$0$0
                           000000    53 	C$main.c$10$0_0$133	= .
                                     54 	.globl	C$main.c$10$0_0$133
                                     55 ;src/main.c:10: void main(void)
                                     56 ;	---------------------------------
                                     57 ; Function main
                                     58 ; ---------------------------------
      000000                         59 _main::
      000000 E8 E0            [16]   60 	add	sp, #-32
                           000002    61 	C$main.c$12$1_0$133	= .
                                     62 	.globl	C$main.c$12$1_0$133
                                     63 ;src/main.c:12: raise_error(ENONE,0xFF,"Hello World !");
      000002 11r3Dr01         [12]   64 	ld	de, #___str_0
      000005 D5               [16]   65 	push	de
      000006 1E FF            [ 8]   66 	ld	e, #0xff
      000008 AF               [ 4]   67 	xor	a, a
      000009 CDr00r00         [24]   68 	call	_raise_error
                           00000C    69 	C$main.c$19$1_1$134	= .
                                     70 	.globl	C$main.c$19$1_1$134
                                     71 ;src/main.c:19: struct task_t * task_0 = create_task(Event,0,NULL,NULL);
      00000C 11 00 00         [12]   72 	ld	de, #0x0000
      00000F D5               [16]   73 	push	de
      000010 D5               [16]   74 	push	de
      000011 AF               [ 4]   75 	xor	a, a
      000012 5F               [ 4]   76 	ld	e, a
      000013 CDr00r00         [24]   77 	call	_create_task
      000016 59               [ 4]   78 	ld	e, c
                           000017    79 	C$main.c$21$1_1$134	= .
                                     80 	.globl	C$main.c$21$1_1$134
                                     81 ;src/main.c:21: if(!task_0)
      000017 78               [ 4]   82 	ld	a,b
      000018 57               [ 4]   83 	ld	d,a
      000019 B1               [ 4]   84 	or	a, c
      00001A 20 0D            [12]   85 	jr	NZ, 00102$
                           00001C    86 	C$main.c$22$1_1$134	= .
                                     87 	.globl	C$main.c$22$1_1$134
                                     88 ;src/main.c:22: raise_error(EASSERT,0xFF,"task0 !");
      00001C D5               [16]   89 	push	de
      00001D 01r4Br01         [12]   90 	ld	bc, #___str_1
      000020 C5               [16]   91 	push	bc
      000021 1E FF            [ 8]   92 	ld	e, #0xff
      000023 3E 0F            [ 8]   93 	ld	a, #0x0f
      000025 CDr00r00         [24]   94 	call	_raise_error
      000028 D1               [12]   95 	pop	de
      000029                         96 00102$:
                           000029    97 	C$main.c$23$1_1$134	= .
                                     98 	.globl	C$main.c$23$1_1$134
                                     99 ;src/main.c:23: if(task_number != 1)
      000029 FAr00r00         [16]  100 	ld	a, (#_task_number)
      00002C 3D               [ 4]  101 	dec	a
      00002D 28 0D            [12]  102 	jr	Z, 00104$
                           00002F   103 	C$main.c$24$1_1$134	= .
                                    104 	.globl	C$main.c$24$1_1$134
                                    105 ;src/main.c:24: raise_error(EASSERT,0xFF,"task_number !");
      00002F D5               [16]  106 	push	de
      000030 01r53r01         [12]  107 	ld	bc, #___str_2
      000033 C5               [16]  108 	push	bc
      000034 1E FF            [ 8]  109 	ld	e, #0xff
      000036 3E 0F            [ 8]  110 	ld	a, #0x0f
      000038 CDr00r00         [24]  111 	call	_raise_error
      00003B D1               [12]  112 	pop	de
      00003C                        113 00104$:
                           00003C   114 	C$main.c$25$1_1$134	= .
                                    115 	.globl	C$main.c$25$1_1$134
                                    116 ;src/main.c:25: destroy_task(task_0);
      00003C CDr00r00         [24]  117 	call	_destroy_task
                           00003F   118 	C$main.c$26$1_1$134	= .
                                    119 	.globl	C$main.c$26$1_1$134
                                    120 ;src/main.c:26: if(task_number != 0)
      00003F FAr00r00         [16]  121 	ld	a, (#_task_number)
      000042 B7               [ 4]  122 	or	a, a
      000043 28 0B            [12]  123 	jr	Z, 00106$
                           000045   124 	C$main.c$27$1_1$134	= .
                                    125 	.globl	C$main.c$27$1_1$134
                                    126 ;src/main.c:27: raise_error(EASSERT,0xFF,"task_number 2!");
      000045 11r61r01         [12]  127 	ld	de, #___str_3
      000048 D5               [16]  128 	push	de
      000049 1E FF            [ 8]  129 	ld	e, #0xff
      00004B 3E 0F            [ 8]  130 	ld	a, #0x0f
      00004D CDr00r00         [24]  131 	call	_raise_error
      000050                        132 00106$:
                           000050   133 	C$main.c$32$2_2$136	= .
                                    134 	.globl	C$main.c$32$2_2$136
                                    135 ;src/main.c:32: foreach_task(t)
      000050 01r00r00         [12]  136 	ld	bc, #_tasks
      000053                        137 00122$:
      000053 21r00r00         [12]  138 	ld	hl, #_last_task_p
      000056 79               [ 4]  139 	ld	a, c
      000057 96               [ 8]  140 	sub	a, (hl)
      000058 23               [ 8]  141 	inc	hl
      000059 78               [ 4]  142 	ld	a, b
      00005A 9E               [ 8]  143 	sbc	a, (hl)
      00005B 30 27            [12]  144 	jr	NC, 00109$
                           00005D   145 	C$main.c$34$3_2$137	= .
                                    146 	.globl	C$main.c$34$3_2$137
                                    147 ;src/main.c:34: if(!create_task(Event,0,NULL,NULL))
      00005D C5               [16]  148 	push	bc
      00005E 11 00 00         [12]  149 	ld	de, #0x0000
      000061 D5               [16]  150 	push	de
      000062 D5               [16]  151 	push	de
      000063 AF               [ 4]  152 	xor	a, a
      000064 5F               [ 4]  153 	ld	e, a
      000065 CDr00r00         [24]  154 	call	_create_task
      000068 59               [ 4]  155 	ld	e, c
      000069 50               [ 4]  156 	ld	d, b
      00006A C1               [12]  157 	pop	bc
      00006B 7A               [ 4]  158 	ld	a, d
      00006C B3               [ 4]  159 	or	a, e
      00006D 20 0D            [12]  160 	jr	NZ, 00123$
                           00006F   161 	C$main.c$35$3_2$137	= .
                                    162 	.globl	C$main.c$35$3_2$137
                                    163 ;src/main.c:35: raise_error(EASSERT,0xFF,"bunch of task !");
      00006F C5               [16]  164 	push	bc
      000070 11r70r01         [12]  165 	ld	de, #___str_4
      000073 D5               [16]  166 	push	de
      000074 1E FF            [ 8]  167 	ld	e, #0xff
      000076 3E 0F            [ 8]  168 	ld	a, #0x0f
      000078 CDr00r00         [24]  169 	call	_raise_error
      00007B C1               [12]  170 	pop	bc
      00007C                        171 00123$:
                           00007C   172 	C$main.c$32$2_2$136	= .
                                    173 	.globl	C$main.c$32$2_2$136
                                    174 ;src/main.c:32: foreach_task(t)
      00007C 21 07 00         [12]  175 	ld	hl, #0x0007
      00007F 09               [ 8]  176 	add	hl, bc
      000080 4D               [ 4]  177 	ld	c, l
      000081 44               [ 4]  178 	ld	b, h
      000082 18 CF            [12]  179 	jr	00122$
      000084                        180 00109$:
                           000084   181 	C$main.c$38$2_3$139	= .
                                    182 	.globl	C$main.c$38$2_3$139
                                    183 ;src/main.c:38: foreach_task(t)
      000084 01r00r00         [12]  184 	ld	bc, #_tasks
      000087                        185 00125$:
      000087 21r00r00         [12]  186 	ld	hl, #_last_task_p
      00008A 79               [ 4]  187 	ld	a, c
      00008B 96               [ 8]  188 	sub	a, (hl)
      00008C 23               [ 8]  189 	inc	hl
      00008D 78               [ 4]  190 	ld	a, b
      00008E 9E               [ 8]  191 	sbc	a, (hl)
      00008F 30 2D            [12]  192 	jr	NC, 00110$
                           000091   193 	C$main.c$40$3_3$140	= .
                                    194 	.globl	C$main.c$40$3_3$140
                                    195 ;src/main.c:40: sprintf(buff,"task id : %d",t->task_id);
      000091 21 04 00         [12]  196 	ld	hl, #0x0004
      000094 09               [ 8]  197 	add	hl, bc
      000095 5E               [ 8]  198 	ld	e, (hl)
      000096 16 00            [ 8]  199 	ld	d, #0x00
      000098 21 00 00         [12]  200 	ld	hl, #0
      00009B 39               [ 8]  201 	add	hl, sp
      00009C C5               [16]  202 	push	bc
      00009D D5               [16]  203 	push	de
      00009E 11r80r01         [12]  204 	ld	de, #___str_5
      0000A1 D5               [16]  205 	push	de
      0000A2 E5               [16]  206 	push	hl
      0000A3 CDr00r00         [24]  207 	call	_sprintf
      0000A6 E8 06            [16]  208 	add	sp, #6
      0000A8 C1               [12]  209 	pop	bc
                           0000A9   210 	C$main.c$41$3_3$140	= .
                                    211 	.globl	C$main.c$41$3_3$140
                                    212 ;src/main.c:41: raise_error(ENONE,0xFF,buff);
      0000A9 21 00 00         [12]  213 	ld	hl, #0
      0000AC 39               [ 8]  214 	add	hl, sp
      0000AD C5               [16]  215 	push	bc
      0000AE E5               [16]  216 	push	hl
      0000AF 1E FF            [ 8]  217 	ld	e, #0xff
      0000B1 AF               [ 4]  218 	xor	a, a
      0000B2 CDr00r00         [24]  219 	call	_raise_error
      0000B5 C1               [12]  220 	pop	bc
                           0000B6   221 	C$main.c$38$2_3$139	= .
                                    222 	.globl	C$main.c$38$2_3$139
                                    223 ;src/main.c:38: foreach_task(t)
      0000B6 21 07 00         [12]  224 	ld	hl, #0x0007
      0000B9 09               [ 8]  225 	add	hl, bc
      0000BA 4D               [ 4]  226 	ld	c, l
      0000BB 44               [ 4]  227 	ld	b, h
      0000BC 18 C9            [12]  228 	jr	00125$
      0000BE                        229 00110$:
                           0000BE   230 	C$main.c$44$1_3$138	= .
                                    231 	.globl	C$main.c$44$1_3$138
                                    232 ;src/main.c:44: if(create_task(Event,0,NULL,NULL))
      0000BE 11 00 00         [12]  233 	ld	de, #0x0000
      0000C1 D5               [16]  234 	push	de
      0000C2 D5               [16]  235 	push	de
      0000C3 AF               [ 4]  236 	xor	a, a
      0000C4 5F               [ 4]  237 	ld	e, a
      0000C5 CDr00r00         [24]  238 	call	_create_task
      0000C8 78               [ 4]  239 	ld	a, b
      0000C9 B1               [ 4]  240 	or	a, c
      0000CA 28 0B            [12]  241 	jr	Z, 00112$
                           0000CC   242 	C$main.c$45$1_3$138	= .
                                    243 	.globl	C$main.c$45$1_3$138
                                    244 ;src/main.c:45: raise_error(EASSERT,0xFF,"to much task !");
      0000CC 11r8Dr01         [12]  245 	ld	de, #___str_6
      0000CF D5               [16]  246 	push	de
      0000D0 1E FF            [ 8]  247 	ld	e, #0xff
      0000D2 3E 0F            [ 8]  248 	ld	a, #0x0f
      0000D4 CDr00r00         [24]  249 	call	_raise_error
      0000D7                        250 00112$:
                           0000D7   251 	C$main.c$47$1_3$138	= .
                                    252 	.globl	C$main.c$47$1_3$138
                                    253 ;src/main.c:47: task_number--;
      0000D7 21r00r00         [12]  254 	ld	hl, #_task_number
      0000DA 35               [12]  255 	dec	(hl)
                           0000DB   256 	C$main.c$48$1_3$138	= .
                                    257 	.globl	C$main.c$48$1_3$138
                                    258 ;src/main.c:48: if(create_task(Event,0,NULL,NULL))
      0000DB 11 00 00         [12]  259 	ld	de, #0x0000
      0000DE D5               [16]  260 	push	de
      0000DF D5               [16]  261 	push	de
      0000E0 AF               [ 4]  262 	xor	a, a
      0000E1 5F               [ 4]  263 	ld	e, a
      0000E2 CDr00r00         [24]  264 	call	_create_task
      0000E5 78               [ 4]  265 	ld	a, b
      0000E6 B1               [ 4]  266 	or	a, c
      0000E7 28 0B            [12]  267 	jr	Z, 00114$
                           0000E9   268 	C$main.c$49$1_3$138	= .
                                    269 	.globl	C$main.c$49$1_3$138
                                    270 ;src/main.c:49: raise_error(EASSERT,0xFF,"overwrite task !");
      0000E9 11r9Cr01         [12]  271 	ld	de, #___str_7
      0000EC D5               [16]  272 	push	de
      0000ED 1E FF            [ 8]  273 	ld	e, #0xff
      0000EF 3E 0F            [ 8]  274 	ld	a, #0x0f
      0000F1 CDr00r00         [24]  275 	call	_raise_error
      0000F4                        276 00114$:
                           0000F4   277 	C$main.c$50$1_3$138	= .
                                    278 	.globl	C$main.c$50$1_3$138
                                    279 ;src/main.c:50: task_number++;
      0000F4 21r00r00         [12]  280 	ld	hl, #_task_number
      0000F7 34               [12]  281 	inc	(hl)
                           0000F8   282 	C$main.c$52$1_3$138	= .
                                    283 	.globl	C$main.c$52$1_3$138
                                    284 ;src/main.c:52: current_task_p = &tasks[0];
      0000F8 21r00r00         [12]  285 	ld	hl, #_current_task_p
      0000FB 3Er00            [ 8]  286 	ld	a, #<(_tasks)
      0000FD 22               [ 8]  287 	ld	(hl+), a
                           0000FE   288 	C$main.c$53$1_3$138	= .
                                    289 	.globl	C$main.c$53$1_3$138
                                    290 ;src/main.c:53: destroy_task(current_task_p);
      0000FE 3Es00            [ 8]  291 	ld	a, #>(_tasks)
      000100 32               [ 8]  292 	ld	(hl-), a
      000101 2A               [ 8]  293 	ld	a, (hl+)
      000102 5F               [ 4]  294 	ld	e, a
      000103 56               [ 8]  295 	ld	d, (hl)
      000104 CDr00r00         [24]  296 	call	_destroy_task
                           000107   297 	C$main.c$54$1_3$138	= .
                                    298 	.globl	C$main.c$54$1_3$138
                                    299 ;src/main.c:54: if(task_number != 32)
      000107 FAr00r00         [16]  300 	ld	a, (#_task_number)
      00010A D6 20            [ 8]  301 	sub	a, #0x20
      00010C 28 0B            [12]  302 	jr	Z, 00116$
                           00010E   303 	C$main.c$55$1_3$138	= .
                                    304 	.globl	C$main.c$55$1_3$138
                                    305 ;src/main.c:55: raise_error(EASSERT,0xFF,"illegal destroy !");
      00010E 11rADr01         [12]  306 	ld	de, #___str_8
      000111 D5               [16]  307 	push	de
      000112 1E FF            [ 8]  308 	ld	e, #0xff
      000114 3E 0F            [ 8]  309 	ld	a, #0x0f
      000116 CDr00r00         [24]  310 	call	_raise_error
      000119                        311 00116$:
                           000119   312 	C$main.c$57$2_3$141	= .
                                    313 	.globl	C$main.c$57$2_3$141
                                    314 ;src/main.c:57: foreach_task(t)
      000119 01r00r00         [12]  315 	ld	bc, #_tasks
      00011C                        316 00128$:
      00011C 21r00r00         [12]  317 	ld	hl, #_last_task_p
      00011F 79               [ 4]  318 	ld	a, c
      000120 96               [ 8]  319 	sub	a, (hl)
      000121 23               [ 8]  320 	inc	hl
      000122 78               [ 4]  321 	ld	a, b
      000123 9E               [ 8]  322 	sbc	a, (hl)
      000124 30 0F            [12]  323 	jr	NC, 00119$
                           000126   324 	C$main.c$59$3_3$142	= .
                                    325 	.globl	C$main.c$59$3_3$142
                                    326 ;src/main.c:59: destroy_task(t);
      000126 C5               [16]  327 	push	bc
      000127 59               [ 4]  328 	ld	e, c
      000128 50               [ 4]  329 	ld	d, b
      000129 CDr00r00         [24]  330 	call	_destroy_task
      00012C C1               [12]  331 	pop	bc
                           00012D   332 	C$main.c$57$2_3$141	= .
                                    333 	.globl	C$main.c$57$2_3$141
                                    334 ;src/main.c:57: foreach_task(t)
      00012D 21 07 00         [12]  335 	ld	hl, #0x0007
      000130 09               [ 8]  336 	add	hl, bc
      000131 4D               [ 4]  337 	ld	c, l
      000132 44               [ 4]  338 	ld	b, h
      000133 18 E7            [12]  339 	jr	00128$
                           000135   340 	C$main.c$64$1_3$138	= .
                                    341 	.globl	C$main.c$64$1_3$138
                                    342 ;src/main.c:64: while(1) {
      000135                        343 00119$:
                           000135   344 	C$main.c$70$2_3$143	= .
                                    345 	.globl	C$main.c$70$2_3$143
                                    346 ;src/main.c:70: wait_vbl_done();
      000135 CDr00r00         [24]  347 	call	_wait_vbl_done
      000138 18 FB            [12]  348 	jr	00119$
                           00013A   349 	C$main.c$72$1_3$133	= .
                                    350 	.globl	C$main.c$72$1_3$133
                                    351 ;src/main.c:72: }
      00013A E8 20            [16]  352 	add	sp, #32
                           00013C   353 	C$main.c$72$1_3$133	= .
                                    354 	.globl	C$main.c$72$1_3$133
                           00013C   355 	XG$main$0$0	= .
                                    356 	.globl	XG$main$0$0
      00013C C9               [16]  357 	ret
                           00013D   358 Fmain$__str_0$0_0$0 == .
      00013D                        359 ___str_0:
      00013D 48 65 6C 6C 6F 20 57   360 	.ascii "Hello World !"
             6F 72 6C 64 20 21
      00014A 00                     361 	.db 0x00
                           00014B   362 Fmain$__str_1$0_0$0 == .
      00014B                        363 ___str_1:
      00014B 74 61 73 6B 30 20 21   364 	.ascii "task0 !"
      000152 00                     365 	.db 0x00
                           000153   366 Fmain$__str_2$0_0$0 == .
      000153                        367 ___str_2:
      000153 74 61 73 6B 5F 6E 75   368 	.ascii "task_number !"
             6D 62 65 72 20 21
      000160 00                     369 	.db 0x00
                           000161   370 Fmain$__str_3$0_0$0 == .
      000161                        371 ___str_3:
      000161 74 61 73 6B 5F 6E 75   372 	.ascii "task_number 2!"
             6D 62 65 72 20 32 21
      00016F 00                     373 	.db 0x00
                           000170   374 Fmain$__str_4$0_0$0 == .
      000170                        375 ___str_4:
      000170 62 75 6E 63 68 20 6F   376 	.ascii "bunch of task !"
             66 20 74 61 73 6B 20
             21
      00017F 00                     377 	.db 0x00
                           000180   378 Fmain$__str_5$0_0$0 == .
      000180                        379 ___str_5:
      000180 74 61 73 6B 20 69 64   380 	.ascii "task id : %d"
             20 3A 20 25 64
      00018C 00                     381 	.db 0x00
                           00018D   382 Fmain$__str_6$0_0$0 == .
      00018D                        383 ___str_6:
      00018D 74 6F 20 6D 75 63 68   384 	.ascii "to much task !"
             20 74 61 73 6B 20 21
      00019B 00                     385 	.db 0x00
                           00019C   386 Fmain$__str_7$0_0$0 == .
      00019C                        387 ___str_7:
      00019C 6F 76 65 72 77 72 69   388 	.ascii "overwrite task !"
             74 65 20 74 61 73 6B
             20 21
      0001AC 00                     389 	.db 0x00
                           0001AD   390 Fmain$__str_8$0_0$0 == .
      0001AD                        391 ___str_8:
      0001AD 69 6C 6C 65 67 61 6C   392 	.ascii "illegal destroy !"
             20 64 65 73 74 72 6F
             79 20 21
      0001BE 00                     393 	.db 0x00
                                    394 	.area _CODE
                                    395 	.area _INITIALIZER
                           000000   396 Fmain$__xinit___EMU_PROFILER_INIT$0_0$0 == .
      000000                        397 __xinit____EMU_PROFILER_INIT:
      000000r00r00                  398 	.dw _EMU_profiler_message
                                    399 	.area _CABS (ABS)
