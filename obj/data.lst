                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.2 #13350 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module data
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _last_data_p
                                     12 	.globl _task_datas
                                     13 	.globl _init_flags
                                     14 	.globl _set_flag
                                     15 	.globl _clear_flag
                                     16 	.globl _is_flag_set
                                     17 	.globl _is_any_flag_set
                                     18 ;--------------------------------------------------------
                                     19 ; special function registers
                                     20 ;--------------------------------------------------------
                                     21 ;--------------------------------------------------------
                                     22 ; ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area _DATA
                           000000    25 G$task_datas$0_0$0==.
      000000                         26 _task_datas::
      000000                         27 	.ds 992
                                     28 ;--------------------------------------------------------
                                     29 ; ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area _INITIALIZED
                           000000    32 G$last_data_p$0_0$0==.
      000000                         33 _last_data_p::
      000000                         34 	.ds 2
                                     35 ;--------------------------------------------------------
                                     36 ; absolute external ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area _DABS (ABS)
                                     39 ;--------------------------------------------------------
                                     40 ; global & static initialisations
                                     41 ;--------------------------------------------------------
                                     42 	.area _HOME
                                     43 	.area _GSINIT
                                     44 	.area _GSFINAL
                                     45 	.area _GSINIT
                                     46 ;--------------------------------------------------------
                                     47 ; Home
                                     48 ;--------------------------------------------------------
                                     49 	.area _HOME
                                     50 	.area _HOME
                                     51 ;--------------------------------------------------------
                                     52 ; code
                                     53 ;--------------------------------------------------------
                                     54 	.area _CODE
                           000000    55 	G$init_flags$0$0	= .
                                     56 	.globl	G$init_flags$0$0
                           000000    57 	C$data.c$10$0_0$116	= .
                                     58 	.globl	C$data.c$10$0_0$116
                                     59 ;src/data.c:10: inline void init_flags(FLAG_T *flags) {
                                     60 ;	---------------------------------
                                     61 ; Function init_flags
                                     62 ; ---------------------------------
      000000                         63 _init_flags::
                           000000    64 	C$data.c$11$1_0$116	= .
                                     65 	.globl	C$data.c$11$1_0$116
                                     66 ;src/data.c:11: *flags = 0;
      000000 AF               [ 4]   67 	xor	a, a
      000001 12               [ 8]   68 	ld	(de), a
      000002 13               [ 8]   69 	inc	de
      000003 12               [ 8]   70 	ld	(de), a
                           000004    71 	C$data.c$12$1_0$116	= .
                                     72 	.globl	C$data.c$12$1_0$116
                                     73 ;src/data.c:12: }
                           000004    74 	C$data.c$12$1_0$116	= .
                                     75 	.globl	C$data.c$12$1_0$116
                           000004    76 	XG$init_flags$0$0	= .
                                     77 	.globl	XG$init_flags$0$0
      000004 C9               [16]   78 	ret
                           000005    79 	G$set_flag$0$0	= .
                                     80 	.globl	G$set_flag$0$0
                           000005    81 	C$data.c$15$1_0$118	= .
                                     82 	.globl	C$data.c$15$1_0$118
                                     83 ;src/data.c:15: inline void set_flag(FLAG_T *flags, uint8_t index) {
                                     84 ;	---------------------------------
                                     85 ; Function set_flag
                                     86 ; ---------------------------------
      000005                         87 _set_flag::
      000005 D5               [16]   88 	push	de
      000006 47               [ 4]   89 	ld	b, a
                           000007    90 	C$data.c$16$1_0$118	= .
                                     91 	.globl	C$data.c$16$1_0$118
                                     92 ;src/data.c:16: *flags |= (1 << index);
      000007 D1               [12]   93 	pop	de
      000008 D5               [16]   94 	push	de
      000009 1A               [ 8]   95 	ld	a, (de)
      00000A 4F               [ 4]   96 	ld	c, a
      00000B 13               [ 8]   97 	inc	de
      00000C 1A               [ 8]   98 	ld	a, (de)
      00000D 21 01 00         [12]   99 	ld	hl, #0x0001
      000010 04               [ 4]  100 	inc	b
      000011 18 01            [12]  101 	jr	00104$
      000013                        102 00103$:
      000013 29               [ 8]  103 	add	hl, hl
      000014                        104 00104$:
      000014 05               [ 4]  105 	dec	b
      000015 20 FC            [12]  106 	jr	NZ,00103$
      000017 F5               [16]  107 	push	af
      000018 79               [ 4]  108 	ld	a, c
      000019 B5               [ 4]  109 	or	a, l
      00001A 4F               [ 4]  110 	ld	c, a
      00001B F1               [12]  111 	pop	af
      00001C B4               [ 4]  112 	or	a, h
      00001D 47               [ 4]  113 	ld	b, a
      00001E E1               [12]  114 	pop	hl
      00001F E5               [16]  115 	push	hl
      000020 79               [ 4]  116 	ld	a, c
      000021 22               [ 8]  117 	ld	(hl+), a
      000022 70               [ 8]  118 	ld	(hl), b
                           000023   119 	C$data.c$17$1_0$118	= .
                                    120 	.globl	C$data.c$17$1_0$118
                                    121 ;src/data.c:17: }
      000023 33               [ 8]  122 	inc	sp
      000024 33               [ 8]  123 	inc	sp
                           000025   124 	C$data.c$17$1_0$118	= .
                                    125 	.globl	C$data.c$17$1_0$118
                           000025   126 	XG$set_flag$0$0	= .
                                    127 	.globl	XG$set_flag$0$0
      000025 C9               [16]  128 	ret
                           000026   129 	G$clear_flag$0$0	= .
                                    130 	.globl	G$clear_flag$0$0
                           000026   131 	C$data.c$20$1_0$120	= .
                                    132 	.globl	C$data.c$20$1_0$120
                                    133 ;src/data.c:20: inline void clear_flag(FLAG_T *flags, uint8_t index) {
                                    134 ;	---------------------------------
                                    135 ; Function clear_flag
                                    136 ; ---------------------------------
      000026                        137 _clear_flag::
      000026 D5               [16]  138 	push	de
      000027 47               [ 4]  139 	ld	b, a
                           000028   140 	C$data.c$21$1_0$120	= .
                                    141 	.globl	C$data.c$21$1_0$120
                                    142 ;src/data.c:21: *flags &= ~(1 << index);
      000028 D1               [12]  143 	pop	de
      000029 D5               [16]  144 	push	de
      00002A 1A               [ 8]  145 	ld	a, (de)
      00002B 4F               [ 4]  146 	ld	c, a
      00002C 13               [ 8]  147 	inc	de
      00002D 1A               [ 8]  148 	ld	a, (de)
      00002E 21 01 00         [12]  149 	ld	hl, #0x0001
      000031 04               [ 4]  150 	inc	b
      000032 18 01            [12]  151 	jr	00104$
      000034                        152 00103$:
      000034 29               [ 8]  153 	add	hl, hl
      000035                        154 00104$:
      000035 05               [ 4]  155 	dec	b
      000036 20 FC            [12]  156 	jr	NZ,00103$
      000038 F5               [16]  157 	push	af
      000039 7D               [ 4]  158 	ld	a, l
      00003A 2F               [ 4]  159 	cpl
      00003B 5F               [ 4]  160 	ld	e, a
      00003C 7C               [ 4]  161 	ld	a, h
      00003D 2F               [ 4]  162 	cpl
      00003E 57               [ 4]  163 	ld	d, a
      00003F 79               [ 4]  164 	ld	a, c
      000040 A3               [ 4]  165 	and	a, e
      000041 4F               [ 4]  166 	ld	c, a
      000042 F1               [12]  167 	pop	af
      000043 A2               [ 4]  168 	and	a, d
      000044 47               [ 4]  169 	ld	b, a
      000045 E1               [12]  170 	pop	hl
      000046 E5               [16]  171 	push	hl
      000047 79               [ 4]  172 	ld	a, c
      000048 22               [ 8]  173 	ld	(hl+), a
      000049 70               [ 8]  174 	ld	(hl), b
                           00004A   175 	C$data.c$22$1_0$120	= .
                                    176 	.globl	C$data.c$22$1_0$120
                                    177 ;src/data.c:22: }
      00004A 33               [ 8]  178 	inc	sp
      00004B 33               [ 8]  179 	inc	sp
                           00004C   180 	C$data.c$22$1_0$120	= .
                                    181 	.globl	C$data.c$22$1_0$120
                           00004C   182 	XG$clear_flag$0$0	= .
                                    183 	.globl	XG$clear_flag$0$0
      00004C C9               [16]  184 	ret
                           00004D   185 	G$is_flag_set$0$0	= .
                                    186 	.globl	G$is_flag_set$0$0
                           00004D   187 	C$data.c$25$1_0$122	= .
                                    188 	.globl	C$data.c$25$1_0$122
                                    189 ;src/data.c:25: inline _Bool is_flag_set(FLAG_T *flags, uint8_t index) {
                                    190 ;	---------------------------------
                                    191 ; Function is_flag_set
                                    192 ; ---------------------------------
      00004D                        193 _is_flag_set::
      00004D 6B               [ 4]  194 	ld	l, e
                                    195 ;	spillPairReg hl
                                    196 ;	spillPairReg hl
      00004E 62               [ 4]  197 	ld	h, d
                                    198 ;	spillPairReg hl
                                    199 ;	spillPairReg hl
      00004F 4F               [ 4]  200 	ld	c, a
                           000050   201 	C$data.c$26$1_0$122	= .
                                    202 	.globl	C$data.c$26$1_0$122
                                    203 ;src/data.c:26: return (*flags & (1 << index)) != 0;
      000050 2A               [ 8]  204 	ld	a,	(hl+)
      000051 66               [ 8]  205 	ld	h, (hl)
                                    206 ;	spillPairReg hl
      000052 6F               [ 4]  207 	ld	l, a
                                    208 ;	spillPairReg hl
                                    209 ;	spillPairReg hl
      000053 3E 01            [ 8]  210 	ld	a, #0x01
      000055 06 00            [ 8]  211 	ld	b, #0x00
      000057 0C               [ 4]  212 	inc	c
      000058 18 03            [12]  213 	jr	00104$
      00005A                        214 00103$:
      00005A 87               [ 4]  215 	add	a, a
      00005B CB 10            [ 8]  216 	rl	b
      00005D                        217 00104$:
      00005D 0D               [ 4]  218 	dec	c
      00005E 20 FA            [12]  219 	jr	NZ,00103$
      000060 A5               [ 4]  220 	and	a, l
      000061 4F               [ 4]  221 	ld	c, a
      000062 78               [ 4]  222 	ld	a, b
      000063 A4               [ 4]  223 	and	a, h
      000064 B1               [ 4]  224 	or	a, c
      000065 D6 01            [ 8]  225 	sub	a,#0x01
      000067 3E 00            [ 8]  226 	ld	a, #0x00
      000069 17               [ 4]  227 	rla
      00006A EE 01            [ 8]  228 	xor	a, #0x01
                           00006C   229 	C$data.c$27$1_0$122	= .
                                    230 	.globl	C$data.c$27$1_0$122
                                    231 ;src/data.c:27: }
                           00006C   232 	C$data.c$27$1_0$122	= .
                                    233 	.globl	C$data.c$27$1_0$122
                           00006C   234 	XG$is_flag_set$0$0	= .
                                    235 	.globl	XG$is_flag_set$0$0
      00006C C9               [16]  236 	ret
                           00006D   237 	G$is_any_flag_set$0$0	= .
                                    238 	.globl	G$is_any_flag_set$0$0
                           00006D   239 	C$data.c$30$1_0$124	= .
                                    240 	.globl	C$data.c$30$1_0$124
                                    241 ;src/data.c:30: inline _Bool is_any_flag_set(FLAG_T *flags) {
                                    242 ;	---------------------------------
                                    243 ; Function is_any_flag_set
                                    244 ; ---------------------------------
      00006D                        245 _is_any_flag_set::
      00006D 6B               [ 4]  246 	ld	l, e
                                    247 ;	spillPairReg hl
                                    248 ;	spillPairReg hl
      00006E 62               [ 4]  249 	ld	h, d
                                    250 ;	spillPairReg hl
                                    251 ;	spillPairReg hl
                           00006F   252 	C$data.c$31$1_0$124	= .
                                    253 	.globl	C$data.c$31$1_0$124
                                    254 ;src/data.c:31: return (*flags != 0);
      00006F 2A               [ 8]  255 	ld	a, (hl+)
      000070 B6               [ 8]  256 	or	a,(hl)
      000071 D6 01            [ 8]  257 	sub	a,#0x01
      000073 3E 00            [ 8]  258 	ld	a, #0x00
      000075 17               [ 4]  259 	rla
      000076 EE 01            [ 8]  260 	xor	a, #0x01
                           000078   261 	C$data.c$32$1_0$124	= .
                                    262 	.globl	C$data.c$32$1_0$124
                                    263 ;src/data.c:32: }
                           000078   264 	C$data.c$32$1_0$124	= .
                                    265 	.globl	C$data.c$32$1_0$124
                           000078   266 	XG$is_any_flag_set$0$0	= .
                                    267 	.globl	XG$is_any_flag_set$0$0
      000078 C9               [16]  268 	ret
                                    269 	.area _CODE
                                    270 	.area _INITIALIZER
                           000000   271 Fdata$__xinit_last_data_p$0_0$0 == .
      000000                        272 __xinit__last_data_p:
      000000rE0r03                  273 	.dw (_task_datas + 992)
                                    274 	.area _CABS (ABS)
